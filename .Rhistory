return fit$coefficients[[paste0(variable,value)]]
fit$coefficients[[paste0(variable,value)]]
fit$coefficients[[paste0("gender","male")]]
coef.lookup<-function(variable,value){
if (!(variable %in% attr(fit$terms,"term.labels"))) {
stop("variable not in model")
} else if (!(value %in% fit$xlevels[[variable]])) {
stop("value not observed for this variable")
#    } else if (fit$xlevels[[variable]][[1]]==value) {
#        return 0
} else
return (fit$coefficients[[paste0(variable,value)]])
}
coef.lookup<-function(variable,value){
if (!(variable %in% attr(fit$terms,"term.labels"))) {
stop("variable not in model")
} else if (!(value %in% fit$xlevels[[variable]])) {
stop("value not observed for this variable")
} else if (fit$xlevels[[variable]][[1]]==value) {
return (0)
} else
return (fit$coefficients[[paste0(variable,value)]])
}
coef.lookup("gender","male")
coef.lookup("gender","female")
coef.lookup("gender","females")
coef.lookup("gender","female")
coef.lookup("gendser","female")
45.6+784.6
coef.lookup
coef.lookup<-function(variable,value){
if !(variable %in% attr(fit$terms,"term.labels")) {
stop("variable not in model")
} else if (!(value %in% fit$xlevels[[variable]])) {
stop("value not observed for this variable")
} else if (fit$xlevels[[variable]][[1]]==value) {
return (0)
} else
return (fit$coefficients[[paste0(variable,value)]])
}
coef.lookup<-function(variable,value){
if (!(variable %in% attr(fit$terms,"term.labels"))) {
stop("variable not in model")
} else if (!(value %in% fit$xlevels[[variable]])) {
stop("value not observed for this variable")
} else if (fit$xlevels[[variable]][[1]]==value) {
return (0)
} else
return (fit$coefficients[[paste0(variable,value)]])
}
P.X<-function(X,outcome,variable,value){
(1+exp(X+coef.lookup(variable,value)-cuts[outcome+1]))^-1-(1+exp(X+coef.lookup(variable,value)-cuts[outcome]))^-1
}
P.X(1,1,"gender","male")
P.X(1,1,"gender","female")
P.X(1,2,"gender","male")
P.X(1,2,"gender","female")
P.X(1,3,"gender","male")
P.X(1,3,"gender","female")
variables<-attr(fit$terms,"term.labels")
variables
proportions.raw
fit$xlevels[["gender"]]
str(fit$xlevels[["gender"]])
for (i in fit$xlevels[["gender"]]){i}
for (i in fit$xlevels[["gender"]]){print i}
for (i in fit$xlevels[["gender"]]){print i}
for (i in fit$xlevels[["gender"]]){
print i}
print i
print fit$xlevels[["gender"]][[1]]
for (i in fit$xlevels[["gender"]]){print (i)}
for (i in fit$xlevels[["gender"]]){P.X(X=0,outcome = 1,variable = "gender",value = i)}
for (i in fit$xlevels[["gender"]]){print(P.X(X=0,outcome = 1,variable = "gender",value = i))}
str(proportions.raw)
proportions.raw[["gender"]]
proportions.raw[["gender"]][["female"]]
for (i in fit$xlevels[["gender"]]){print(P.X(X=0,outcome = 1,variable = "gender",value = i))}
for (i in fit$xlevels[["gender"]]){print(P.X(X=0,outcome = 1,variable = "gender",value = i)*proportions.raw[["gender"]][[i]])}
implied.proportion<-function(X,outcome,variable){
for (i in fit$xlevels[[variable]]){
print(P.X(X=0,outcome = outcome,variable = variable,value = i)*proportions.raw[[variable]][[i]])}
}
implied.proportion(X=0,outcome = 1,variable = "gender")
length(fit$xlevels[["gender"]])
implied.proportion<-function(X,outcome,variable){
implieds<-rep(0,length(fit$xlevels[[variable]]))
for (i in fit$xlevels[[variable]]){
implieds[i]<-P.X(X=0,outcome = outcome,variable = variable,value = i)*
proportions.raw[[variable]][[i]]
}
}
implied.proportion(X = 0,outcome = 1,variable = "gender")
implied.proportion<-function(X,outcome,variable){
implieds<-rep(0,length(fit$xlevels[[variable]]))
for (i in fit$xlevels[[variable]]){
implieds[i]<-P.X(X=0,outcome = outcome,variable = variable,value = i)*
proportions.raw[[variable]][[i]]
}
return(sum(implieds))
}
implied.proportion(X = 0,outcome = 1,variable = "gender")
implied.proportion(X = 0,outcome = 2,variable = "gender")
implied.proportion(X = 0,outcome = 3,variable = "gender")
implied.proportion(X = 0,outcome = 4,variable = "gender")
implied.proportion(X = 10,outcome = 4,variable = "gender")
implied.proportion(X = 10,outcome = 1,variable = "gender")
implied.proportion(X = 10,outcome = 2,variable = "gender")
implied.proportion(X = 10,outcome = 3,variable = "gender")
implied.proportion(X = 10,outcome = 4,variable = "gender")
implied.proportion<-function(X,outcome,variable){
implieds<-rep(0,length(fit$xlevels[[variable]]))
for (i in fit$xlevels[[variable]]){
implieds[i]<-P.X(X=X,outcome = outcome,variable = variable,value = i)*
proportions.raw[[variable]][[i]]
}
return(sum(implieds))
}
implied.proportion(X = 0,outcome = 1,variable = "gender")
implied.proportion(X = 10,outcome = 1,variable = "gender")
implied.proportion(X = 10,outcome = 2,variable = "gender")
implied.proportion(X = 10,outcome = 3,variable = "gender")
implied.proportion(X = 10,outcome = 4,variable = "gender")
proportions.raw
proportions.raw[[1]]
str(fit)
fit$lev
proportions.raw
proportions.raw[[1]]
names(proportions.raw[[1]])
4^2
squared.error<-function(X,variable){
outcome.errors<-rep(0,length(fit$lev))
for (i in 1:length(fit$lev)){
outcome.errors[i]<-(implied.proportion(X=X,outcome = i,variable = variable)-proportions.raw[[1]][[i]])^2
}
return(sum(outcome.errors))
}
squared.error(X=0,variable = "gender")
squared.error(X=-1,variable = "gender")
squared.error(X=-1,variable = "gendr")
squared.error(X=-1,variable = "g")
squared.error(X=-1,variable = "ref")
squared.error(X=-1,variable = "age")
squared.error(X=-1,variable = "ethnicity")
optim(par = 0,fn = squared.error(x,"gender"))
optimise(f = function(x){squared.error(x,"gender")},interval = c(-100,100))
recommend<-function(variable){
optimised<-optimise(f = function(x){squared.error(x,variable)},interval = c(-100,100))
}
recommend("gender")
abc<-recommend("gender")
abc
fit$xvalues[["gender"]]
fit$xlevel[["gender"]]
P.X(X = abc$minimum,outcome = 1,variable = "gender",value = fit$xlevel[["gender"]][[1]])
P.X(X = abc$minimum,outcome = 1,variable = "gender",value = fit$xlevel[["gender"]][[2]])
P.X(X = abc$minimum,outcome = 4,variable = "gender",value = fit$xlevel[["gender"]][[1]])
P.X(X = abc$minimum,outcome = 4,variable = "gender",value = fit$xlevel[["gender"]][[2]])
message("ABD"," ksjd")
recommend<-function(variable){
optimised<-optimise(f = function(x){squared.error(x,variable)},interval = c(-100,100))
message("The recommended value of X is ",optimised$minimum)
}
recommend("gender")
recommend("age")
recommend("ethnicity")
recommend("ethnicity")
recommend("disability")
recommend("anyoldrion")
recommend("ret")
recommend<-function(variable){
if (!(variable %in% variables)) {
stop("variable not in model")
}
optimised<-optimise(f = function(x){squared.error(x,variable)},interval = c(-100,100))
message("The recommended value of X is ",optimised$minimum)
}
recommend("ret")
recommend("gender")
recommend("ethnicity")
recommend("ethnicit")
variables
P.X
P.X(X=0,outcome = 3,variable = "disability","disabled")
P.X(X=0,outcome = 3,variable = "disability","not disabled")
P.X(X=0,outcome = 3,variable = "disability","rthf")
implied.proportion(X = 0,outcome = "dhbe",variable = "ed")
counts.raw
proportions.raw
implied.proportion(X = 0,outcome = 3,variable = "ed")
implied.proportion(X = 0,outcome = 6,variable = "ed")
implied.proportion(X = 0,outcome = "6er",variable = "ed")
length(fit$xlevels[["ethnicity"]])
length(fit$xlevels[["ethn"]])
rep(0,4)
rep(0,0)
sum(rep(0,0))
squared.error
squared.error(X=0,variable = "ethnicity")
squared.error(X=0,variable = "ethnic")
install.packages("roxygen2")
squared.error(X=1,variable = "ethnic")
implied.proportion(X = 0,outcome = 1,variable = "ed")
implied.proportion(X = 0,outcome = 2,variable = "ed")
proportions.raw[[1]]
abc<-proportions.raw[[1]]
abc^2
sum(abc^2)
optimised
recommend("ethnicity")
optimised<-optimise(f = function(x){squared.error(x,variable)},
interval = c(-100,100))
abc<-optimise(f = function(x){squared.error(x,"ethnicity")},
interval = c(-100,100))
abc
fit$xlevels[[ethnicity"]]
fit$xlevels[["ethnicity"]]
str(fit$xlevels[["ethnicity"]])
list(fit$xlevels[["ethnicity"]])
sapply(fit$xlevels[["ethnicity"]],FUN=function(q){P.X(X=0,outcome = 1,variable = "ethnicity",value = q)})
recommend<-function(variable){
if (!(variable %in% variables)) {
stop("variable not in model")
}
optimised<-optimise(f = function(x){squared.error(x,variable)},
interval = c(-100,100))
message("The recommended value of X is ",optimised$minimum)
#create data frame with outcomes along the top and variable values down the side
optimised.probs<-matrix(nrow = length(fit$lev),
ncol = length(fit$xlevels[[variable]])
for (i in 1:length(fit$lev)){
optimised.probs[i,]<-sapply(fit$xlevels[[variable]],
FUN=function(q){
P.X(X=0,outcome = 1,variable = variable,
value = q)})
}
return(optimised.probs)
}
recommend<-function(variable){
if (!(variable %in% variables)) {
stop("variable not in model")
}
optimised<-optimise(f = function(x){squared.error(x,variable)},
interval = c(-100,100))
message("The recommended value of X is ",optimised$minimum)
#create data frame with outcomes along the top and variable values down the side
optimised.probs<-matrix(nrow = length(fit$lev),
ncol = length(fit$xlevels[[variable]]))
for (i in 1:length(fit$lev)){
optimised.probs[i,]<-sapply(fit$xlevels[[variable]],
FUN=function(q){
P.X(X=0,outcome = 1,variable = variable,
value = q)})
}
return(optimised.probs)
}
recommend("ethnicity")
recommend<-function(variable){
if (!(variable %in% variables)) {
stop("variable not in model")
}
optimised<-optimise(f = function(x){squared.error(x,variable)},
interval = c(-100,100))
message("The recommended value of X is ",optimised$minimum)
#create data frame with outcomes along the top and variable values down the side
optimised.probs<-matrix(nrow = length(fit$lev),
ncol = length(fit$xlevels[[variable]]))
for (i in 1:length(fit$lev)){
optimised.probs[i,]<-sapply(fit$xlevels[[variable]],
FUN=function(q){
P.X(X=optimised$minimum,
outcome = i,
variable = variable,
value = q)})
}
return(optimised.probs)
}
recommend("ethnicity")
optimised.probs<-matrix(nrow = length(fit$lev),
ncol = length(fit$xlevels[["ethnicity"]]))
optimised.probs
for (i in 1:length(fit$lev)){
optimised.probs[i,]<-sapply(fit$xlevels[["ethnicity"]],
FUN=function(q){
P.X(X=optimised$minimum,
outcome = i,
variable = "ethnicity",
value = q)})
}
recommend("ethnicity")
sapply(fit$xlevels[["ethnicity"]],FUN=function(q){P.X(X=0,outcome = 1,variable = "ethnicity",value = q)})
str(sapply(fit$xlevels[["ethnicity"]],FUN=function(q){P.X(X=0,outcome = 1,variable = "ethnicity",value = q)}))
sapply(fit$xlevels[[variable]],
FUN=function(q){
P.X(X=0,
outcome = 1:4,
variable = "ethnicity",
value = q)})
sapply(fit$xlevels[["ethnicity"]],
FUN=function(q){
P.X(X=0,
outcome = 1:4,
variable = "ethnicity",
value = q)})
recommend<-function(variable){
if (!(variable %in% variables)) {
stop("variable not in model")
}
optimised<-optimise(f = function(x){squared.error(x,variable)},
interval = c(-100,100))
message("The recommended value of X is ",optimised$minimum)
#create data frame with outcomes along the top and variable values down the side
optimised.probs<-matrix(nrow = length(fit$lev),
ncol = length(fit$xlevels[[variable]]))
optimised.probs[i,]<-sapply(fit$xlevels[[variable]],
FUN=function(q){
P.X(X=optimised$minimum,
outcome = 1:length(fit$lev),
variable = variable,
value = q)})
return(optimised.probs)
}
recommend("ethnicity")
recommend<-function(variable){
if (!(variable %in% variables)) {
stop("variable not in model")
}
optimised<-optimise(f = function(x){squared.error(x,variable)},
interval = c(-100,100))
message("The recommended value of X is ",optimised$minimum)
#create data frame with outcomes along the top and variable values down the side
#    optimised.probs<-matrix(nrow = length(fit$lev),
#                           ncol = length(fit$xlevels[[variable]]))
optimised.probs<-sapply(fit$xlevels[[variable]],
FUN=function(q){
P.X(X=optimised$minimum,
outcome = 1:length(fit$lev),
variable = variable,
value = q)})
return(optimised.probs)
}
recommend("ethnicity")
cbind(1:4,optimised.probs)
recommend("ethnicity")
as.data.frame(x = recommend("ethnicity"))
recommend<-function(variable){
if (!(variable %in% variables)) {
stop("variable not in model")
}
optimised<-optimise(f = function(x){squared.error(x,variable)},
interval = c(-100,100))
message("The recommended value of X is ",optimised$minimum)
#create data frame with outcomes along the top and variable values down the side
#    optimised.probs<-matrix(nrow = length(fit$lev),
#                           ncol = length(fit$xlevels[[variable]]))
optimised.probs<-sapply(fit$xlevels[[variable]],
FUN=function(q){
P.X(X=optimised$minimum,
outcome = 1:length(fit$lev),
variable = variable,
value = q)})
return(data.frame(optimised.probs))
}
recommend("ethnicity")
abc<-recommend("ethnicity")
names(abc)
fit
str(fit)
fit$model
attr(fit$model,1)
attr(fit$model,"variables")
str(fit$model)
fit$model[1]
names(fit$model[1])
recommend<-function(variable){
if (!(variable %in% variables)) {
stop("variable not in model")
}
optimised<-optimise(f = function(x){squared.error(x,variable)},
interval = c(-100,100))
message("The recommended value of X is ",optimised$minimum)
#create data frame with outcomes along the top and variable values down the side
#    optimised.probs<-matrix(nrow = length(fit$lev),
#                           ncol = length(fit$xlevels[[variable]]))
optimised.probs<-data.frame(sapply(fit$xlevels[[variable]],
FUN=function(q){
P.X(X=optimised$minimum,
outcome = 1:length(fit$lev),
variable = variable,
value = q)}))
optimised.probs<-cbind(1:length(fit$lev),optimised.probs)
names(optimised.probs)[1]<-names(fit$model[1])
optimised.probs
}
recommend("ethnicity")
require(MASS)
# require(foreign)
# dat <- read.dta("http://www.ats.ucla.edu/stat/data/ologit.dta")
test.data <- read.csv("~/GitHub/perfman/test data.csv")
test.data$age <- factor(test.data$age, levels = c(1,2,3,4))
test.data$outcome <- factor(test.data$outcome, levels = c(1,2,3,4))
#ask for what to do with missing values
#default is to replace all missing values NA with "NA"
#fit the ordered logistic model
fit<-polr(data = test.data)
#create the cuts as a numeric vector
cuts<-numeric(length(fit$zeta)+2)
cuts[2:(length(fit$zeta)+1)]<-fit$zeta
cuts[c(1,length(cuts))]<-c(-Inf,Inf)
#create a vector of names of explanatory variables
variables<-attr(fit$terms,"term.labels")
#create the coefficient lookup function
#a convenient function for reading off the estimated coefficients for all
#the explanatory variables (including zero for baseline values)
coef.lookup<-function(variable,value){
if (!(variable %in% variables)) {
stop("variable not in model")
} else if (!(value %in% fit$xlevels[[variable]])) {
stop("value not observed for this variable")
} else if (fit$xlevels[[variable]][[1]]==value) {
return (0)
} else
return (fit$coefficients[[paste0(variable,value)]])
}
#create function P.X(X, outcome, variable, value) that will be treated
#as a function of X and give a specific probability for given outcome k for
#specific value of a specific variable
#what happens with invalid variables/values??
P.X<-function(X,outcome,variable,value){
(1+exp(X+coef.lookup(variable,value)-cuts[outcome+1]))^-1-(1+exp(X+coef.lookup(variable,value)-cuts[outcome]))^-1
}
#get observed proportions of each variable in the data (including outcome)
counts.raw<-apply(test.data,2,table)
proportions.raw<-lapply(counts.raw,FUN = function(x){x/nrow(test.data)})
#create fucntion proportions.implied(X, outcome=k, variable=v)
#that will give the implied proportion for outcome k in BIS assuming X and v
#GIVEN VARIABLE e,g, GENDER, what is the implied proportion for outcome k?
implied.proportion<-function(X,outcome,variable){
implieds<-rep(0,length(fit$xlevels[[variable]]))
for (i in fit$xlevels[[variable]]){
implieds[i]<-P.X(X=X,outcome = outcome,variable = variable,value = i)*
proportions.raw[[variable]][[i]]
}
return(sum(implieds))
}
#GIVEN VARIABLE, find the sqaured error as a function of X
squared.error<-function(X,variable){
outcome.errors<-rep(0,length(fit$lev))
for (i in 1:length(fit$lev)){
outcome.errors[i]<-
(implied.proportion(X=X,outcome = i,variable = variable)-
proportions.raw[[1]][[i]])^2
}
return(sum(outcome.errors))
}
#find answer for given variable
recommend<-function(variable){
if (!(variable %in% variables)) {
stop("variable not in model")
}
optimised<-optimise(f = function(x){squared.error(x,variable)},
interval = c(-100,100))
message("The recommended value of X is ",optimised$minimum)
#create data frame with outcomes along the top and variable values down the side
#    optimised.probs<-matrix(nrow = length(fit$lev),
#                           ncol = length(fit$xlevels[[variable]]))
optimised.probs<-data.frame(sapply(fit$xlevels[[variable]],
FUN=function(q){
P.X(X=optimised$minimum,
outcome = 1:length(fit$lev),
variable = variable,
value = q)}))
optimised.probs<-cbind(1:length(fit$lev),optimised.probs)
names(optimised.probs)[1]<-names(fit$model[1])
optimised.probs
}
recommend("outcome")
recommend("age")
recommend("ethnicity")
recommend("gender")
recommend("disability")
implied.proportion(X = -1.257909,outcome = 1,variable = "disability")
implied.proportion(X = -1.257909,outcome = 1:4,variable = "disability")
sapply(1:4, FUN=function(q){implied.proportion(X=-1.25790946248166,outcome = q,variable = "disability")})
recommend<-function(variable){
if (!(variable %in% variables)) {
stop("variable not in model")
}
optimised<-optimise(f = function(x){squared.error(x,variable)},
interval = c(-100,100))
message("The recommended value of X is ",optimised$minimum)
#create data frame with outcomes along the top and variable values down the side
#    optimised.probs<-matrix(nrow = length(fit$lev),
#                           ncol = length(fit$xlevels[[variable]]))
optimised.probs<-data.frame(sapply(fit$xlevels[[variable]],
FUN=function(q){
P.X(X=optimised$minimum,
outcome = 1:length(fit$lev),
variable = variable,
value = q)}))
optimised.probs<-cbind(1:length(fit$lev),
sapply(1:length(fit$lev), FUN=function(q){
implied.proportion(X=optimised$minimum,
outcome = q,
variable = variable)}),
optimised.probs)
names(optimised.probs)[1]<-names(fit$model[1])
names(optimised.probs)[2]<-"implied probability"
optimised.probs
}
recommend("disability")
