housing
housing()
data()
library(MAS)
library(MASS)
require(foreign)
dat <- read.dta("http://www.ats.ucla.edu/stat/data/ologit.dta")
str(dat)
str(dat$apply)
levels(dat$apply)
factors(dat$apply)
factor(dat$apply)
colSums
lm
getwd()
test.data <- read.csv("~/GitHub/perfman/test data.csv")
View(test.data)
str(test.data)
test.data$age <- factor(test.data$age, levels = c(1,2,3,4))
str(test.data)
test.data$outcome <- factor(test.data$outcome, levels = c(1,2,3,4))
str(test.data)
library(MASS)
fit<-polr(formula = outcome ~ gender + ethnicity + disability + age, data = test.data)
summary(fit)
fit
str(fit)
fit$xlevels
str(fit$xlevels)
head(fit$fitted.values)
require(MASS)
# require(foreign)
# dat <- read.dta("http://www.ats.ucla.edu/stat/data/ologit.dta")
test.data <- read.csv("~/GitHub/perfman/test data.csv")
test.data$age <- factor(test.data$age, levels = c(1,2,3,4))
test.data$outcome <- factor(test.data$outcome, levels = c(1,2,3,4))
fit<-polr(formula = V1 ~ gender + ethnicity + disability + age, data = test.data)
fit<-polr(formula = test.data[,1] ~ gender + ethnicity + disability + age, data = test.data)
fit<-polr(formula = test.data[,1] ~ test.data[,2] + test.data[,3] + test.data[,4] + test.data[,5], data = test.data)
summary(fit)
fit$xlevels
fit<-polr(formula = test.data[,1] ~ test.data[,2:5], data = test.data)
fit<-polr(data = test.data)
summary(fit)
fit$xlevels
fit$xlevels[[1]]
fit$xlevels[[1]][[1]]
fit$xlevels[[1]][[2]]
fit$xlevels[[1,2]]
fit$xlevels[[1:2]]
fit$xlevels[[3:3]]
fit$xlevels[[3]]$3
fit$xlevels[[3]][[3]]
str(fit)
fit$coefficients
fit$coefficients$gendermalee
fit$coefficients$gendermale
fit$coefficients[gendermale]
fit$coefficients[[gendermale]]
fit$coefficients[[1]]
fit$coefficients[["gendermale"]]
fit$coefficients$"gendermale"
fit$coefficients["gendermale"]
fit$coefficients[["gendermale"]]
str(fit$coefficients)
str(fit$coefficients[["gendermale"]])
str(fit$coefficients["gendermale"])
str(fit$coefficients[1])
table(test.data)
summary(test.data)
summary(test.data$outcome)
summary(test.data$outcome)/nrow(test.data)
tapply(test.data,2,summary)
apply(test.data,2,summary)
apply(test.data,2,table)
apply(test.data,2,table)/nrow(test.data)
apply(test.data,2,table/nrow(test.data))
counts<-apply(test.data,2,table)
str(counts)
counts$outcome/nrow(test.data)
lapply(counts,FUN = function(x){x/nrow(test.data)})
str(fit)
fit$zeta
length(fit$zeta)
cuts<-numeric(rep(NA,length(fit$zeta)+2))
cuts<-numeric(rep(0,length(fit$zeta)+2))
cuts<-numeric(rep(length(fit$zeta)+2,NA))
cut<-rep(0,length(fit$zeta)+2)
cuts<-rep(0,length(fit$zeta)+2)
cuts[2:length(fit$zeta)+1]<-fit$zeta
fit$zeta
class(fit$zeta)
cuts<-numeric(length(fit$zeta)+2)
length(fit$zeta)+1
2:length(fit$zeta)+1
2:(length(fit$zeta)+1)
cuts[2:(length(fit$zeta)+1)]<-fit$zeta
cuts
cuts[c(1,5)]<-33
cuts
cuts[c(1,length(cuts))]<-c(-Inf,Inf)
cuts
class(cuts)
(1+exp(3))^-1
(1+exp(3))
(1+exp(2))^-1-(1+exp(3))^-1
(1+exp(3))^-1-(1+exp(Inf))^-1
cuts<-numeric(length(fit$zeta)+2)
cuts[2:(length(fit$zeta)+1)]<-fit$zeta
cuts[c(1,length(cuts))]<-c(-Inf,Inf)
P.X<-function(X,outcome,variable=0, category=0){
(1+exp(X-cuts[outcome+1]))^-1-(1+exp(X-cuts[outcome]))^-1
}
P.X(X=0)
P.X(X=0,outcome=1)
P.X(X=0,outcome=2)
P.X(X=0,outcome=3)
P.X(X=0,outcome=4)
P.X(X=0,outcome=5)
fit$coefficients
str(fir)
str(fit)
fit$terms
fit$terms[term.labels]
fit$terms["term.labels"]
fit$terms[["term.labels"]]
fit$terms[[term.labels]]
attributes(fit$terms)
fit$terms[["term.labels"]]
fit$terms[["term.labels"]][[1]]
fit$terms[["term.labels"]][[2]]
fit$terms["term.labels"][[2]]
fit$terms["term.labels"]
fit$terms[1]
fit$terms[2]
fit$terms[3]
fit$terms[[3]]
fit$terms[[4]]
fit$terms[[5]]
fit$terms[[1]]
fit$terms[attr="term.labels"]
fit$terms[[attr="term.labels"]]
fit.terms
fit$terms
attr(fit$terms,"term.labels")
str(attr(fit$terms,"term.labels"))
fit$xlevels
str(fit$xlevels)
fit$xlevels[["gender"]]
fit$xlevels["gender"]
fit$xlevels[[1]]
fit$xlevels[[1]][[1]]
fit$xlevels[[1]][[2]]
P.X(X=0,outcome=5)
require(MASS)
# require(foreign)
# dat <- read.dta("http://www.ats.ucla.edu/stat/data/ologit.dta")
test.data <- read.csv("~/GitHub/perfman/test data.csv")
test.data$age <- factor(test.data$age, levels = c(1,2,3,4))
test.data$outcome <- factor(test.data$outcome, levels = c(1,2,3,4))
#ask for what to do with missing values
#default is to replace all missing values NA with "NA"
fit<-polr(data = test.data)
#create function P.X(X, outcome=k, variable=v, category=c) that will be treated
#as a function of X and give a specific probability of outcome k for category c
# of variable v
cuts<-numeric(length(fit$zeta)+2)
cuts[2:(length(fit$zeta)+1)]<-fit$zeta
cuts[c(1,length(cuts))]<-c(-Inf,Inf)
variables<-attr(fit$terms,"term.labels")
P.X<-function(X,outcome,variable=0, category=0){
(1+exp(X-cuts[outcome+1]))^-1-(1+exp(X-cuts[outcome]))^-1
}
#get observed proportions of each variable in the data
counts.raw<-apply(test.data,2,table)
proportions.raw<-lapply(counts.raw,FUN = function(x){x/nrow(test.data)})
#create fucntion proportions.implied(X, outcome=k, variable=v)
#that will give the implied proportion for outcome k in BIS assuming X and v
P.X(X=0,outcome=5)
P.X(X=0,outcome=4)
P.X(X=0,outcome=3)
P.X(X=1,outcome=3)
P.X(X=1,outcome=0)
P.X(X=1,outcome=1)
P.X(X=1,outcome=2)
P.X(X=1,outcome=3)
P.X(X=1,outcome=4)
proportions.raw
proportions.raw[["gender"]]
fit$terms[[1]]
fit$terms[[2]]
fit$terms[[attr="term.labels"]]
fit$terms[attr="term.labels"]
attr(fit$terms,"term.labels")
fit$xlevels[[gender]]
fit$xlevels[["gender"]]
abc<-"gender"
fit$xlevels[[abc]]
for (i in fit$xlevels) print i
for i in fit$xlevels (print i)
for (i in as.vector(fit$xlevels)) print i
for (i in as.vector(fit$xlevels)) i
as.vector(fit$xlevels)
for (i in as.vector(fit$xlevels)){print i}
for (i in letter){print i}
for (i in letters){print i}
for (i in letters) {print i}
for (i in 1:10) {print i}
i
for (tr in as.vector(fit$xlevels)){print tr}
for (tr in 1:10) {print tr}
for (tr in 1:10) { tr}
for (tr in 1:10) { tr+1}
for (tr in 1:10) { tr==5}
fit$xlevels
"gender" %in% fit$xlevels
gender %in% fit$xlevels
str(fit)
attr(fit$terms,"term.labels")
str(attr(fit$terms,"term.labels"))
"gender" %in% str(attr(fit$terms,"term.labels"))
"gender" in str(attr(fit$terms,"term.labels"))
"gender" == str(attr(fit$terms,"term.labels"))
"gender" = str(attr(fit$terms,"term.labels"))
"gender" %in% attr(fit$terms,"term.labels")
not("gender" %in% attr(fit$terms,"term.labels"))
NTO("gender" %in% attr(fit$terms,"term.labels"))
NOT("gender" %in% attr(fit$terms,"term.labels"))
fit$levels[abc]
fit$levels[[abc]]
fit$xlevels[[abc]]
fit$xlevels[abc]
cba<-"male"
paste0(abc,cba)
fit$coefficients[["gendermale"]]
coef.lookup<-function(variable,value){
if !(variable %in% attr(fit$terms,"term.labels")) {
stop("variable not in model")
} else if !(value %in% fit$xlevels[[variable]]) {
stop("value not observed for this variable")
} else if (value==fit$xlevels[[variable]][[1]]) {
return 0
} else
return fit$coefficients[[paste0(variable,value)]]
}
NOT("gender" %in% attr(fit$terms,"term.labels"))
!("gender" %in% attr(fit$terms,"term.labels"))
coef.lookup<-function(variable,value){
if (!(variable %in% attr(fit$terms,"term.labels"))) {
stop("variable not in model")
} else if (!(value %in% fit$xlevels[[variable]])) {
stop("value not observed for this variable")
} else if (value==fit$xlevels[[variable]][[1]]) {
return 0
} else
return fit$coefficients[[paste0(variable,value)]]
}
value
variable
fit$xlevels[["gender"]][[1]]
fit$xlevels[["gender"]][[0]]
fit$xlevels[["gender"]][[2]]
coef.lookup<-function(variable,value){
if (!(variable %in% attr(fit$terms,"term.labels"))) {
stop("variable not in model")
} else if (!(value %in% fit$xlevels[[variable]])) {
stop("value not observed for this variable")
} else if (value==fit$xlevels[[variable]][[1]]) {
return 0
} else
return fit$coefficients[[paste0(variable,value)]]
}
coef.lookup<-function(variable,value){
if (!(variable %in% attr(fit$terms,"term.labels"))) {
stop("variable not in model")
} else if (!(value %in% fit$xlevels[[variable]])) {
stop("value not observed for this variable")
} else if (fit$xlevels[[variable]][[1]]==value) {
return 0
} else
return fit$coefficients[[paste0(variable,value)]]
}
coef.lookup<-function(variable,value){
if (!(variable %in% attr(fit$terms,"term.labels"))) {
stop("variable not in model")
} else if (!(value %in% fit$xlevels[[variable]])) {
stop("value not observed for this variable")
} else if (fit$xlevels[[variable]][[1]]==value) {
return 0
} else
return fit$coefficients[[paste0(variable,value)]]
}
coef.lookup<-function(variable,value){
if (!(variable %in% attr(fit$terms,"term.labels"))) {
stop("variable not in model")
} else if (!(value %in% fit$xlevels[[variable]])) {
stop("value not observed for this variable")
#    } else if (fit$xlevels[[variable]][[1]]==value) {
#        return 0
} else
return fit$coefficients[[paste0(variable,value)]]
}
x <- 0
if (x < 0) {
print("Negative number")
} else if (x > 0) {
print("Positive number")
} else
print("Zero")
x <- 1
if (x < 0) {
print("Negative number")
} else if (x > 0) {
print("Positive number")
} else
print("Zero")
x <- -1
if (x < 0) {
print("Negative number")
} else if (x > 0) {
print("Positive number")
} else
print("Zero")
if (!(variable %in% attr(fit$terms,"term.labels"))) {
stop("variable not in model")
} else if (!(value %in% fit$xlevels[[variable]])) {
stop("value not observed for this variable")
#    } else if (fit$xlevels[[variable]][[1]]==value) {
#        return 0
} else
return fit$coefficients[[paste0(variable,value)]]
fit$coefficients[[paste0(variable,value)]]
fit$coefficients[[paste0("gender","male")]]
coef.lookup<-function(variable,value){
if (!(variable %in% attr(fit$terms,"term.labels"))) {
stop("variable not in model")
} else if (!(value %in% fit$xlevels[[variable]])) {
stop("value not observed for this variable")
#    } else if (fit$xlevels[[variable]][[1]]==value) {
#        return 0
} else
return (fit$coefficients[[paste0(variable,value)]])
}
coef.lookup<-function(variable,value){
if (!(variable %in% attr(fit$terms,"term.labels"))) {
stop("variable not in model")
} else if (!(value %in% fit$xlevels[[variable]])) {
stop("value not observed for this variable")
} else if (fit$xlevels[[variable]][[1]]==value) {
return (0)
} else
return (fit$coefficients[[paste0(variable,value)]])
}
coef.lookup("gender","male")
coef.lookup("gender","female")
coef.lookup("gender","females")
coef.lookup("gender","female")
coef.lookup("gendser","female")
45.6+784.6
coef.lookup
coef.lookup<-function(variable,value){
if !(variable %in% attr(fit$terms,"term.labels")) {
stop("variable not in model")
} else if (!(value %in% fit$xlevels[[variable]])) {
stop("value not observed for this variable")
} else if (fit$xlevels[[variable]][[1]]==value) {
return (0)
} else
return (fit$coefficients[[paste0(variable,value)]])
}
coef.lookup<-function(variable,value){
if (!(variable %in% attr(fit$terms,"term.labels"))) {
stop("variable not in model")
} else if (!(value %in% fit$xlevels[[variable]])) {
stop("value not observed for this variable")
} else if (fit$xlevels[[variable]][[1]]==value) {
return (0)
} else
return (fit$coefficients[[paste0(variable,value)]])
}
P.X<-function(X,outcome,variable,value){
(1+exp(X+coef.lookup(variable,value)-cuts[outcome+1]))^-1-(1+exp(X+coef.lookup(variable,value)-cuts[outcome]))^-1
}
P.X(1,1,"gender","male")
P.X(1,1,"gender","female")
P.X(1,2,"gender","male")
P.X(1,2,"gender","female")
P.X(1,3,"gender","male")
P.X(1,3,"gender","female")
variables<-attr(fit$terms,"term.labels")
variables
proportions.raw
fit$xlevels[["gender"]]
str(fit$xlevels[["gender"]])
for (i in fit$xlevels[["gender"]]){i}
for (i in fit$xlevels[["gender"]]){print i}
for (i in fit$xlevels[["gender"]]){print i}
for (i in fit$xlevels[["gender"]]){
print i}
print i
print fit$xlevels[["gender"]][[1]]
for (i in fit$xlevels[["gender"]]){print (i)}
for (i in fit$xlevels[["gender"]]){P.X(X=0,outcome = 1,variable = "gender",value = i)}
for (i in fit$xlevels[["gender"]]){print(P.X(X=0,outcome = 1,variable = "gender",value = i))}
str(proportions.raw)
proportions.raw[["gender"]]
proportions.raw[["gender"]][["female"]]
for (i in fit$xlevels[["gender"]]){print(P.X(X=0,outcome = 1,variable = "gender",value = i))}
for (i in fit$xlevels[["gender"]]){print(P.X(X=0,outcome = 1,variable = "gender",value = i)*proportions.raw[["gender"]][[i]])}
implied.proportion<-function(X,outcome,variable){
for (i in fit$xlevels[[variable]]){
print(P.X(X=0,outcome = outcome,variable = variable,value = i)*proportions.raw[[variable]][[i]])}
}
implied.proportion(X=0,outcome = 1,variable = "gender")
length(fit$xlevels[["gender"]])
implied.proportion<-function(X,outcome,variable){
implieds<-rep(0,length(fit$xlevels[[variable]]))
for (i in fit$xlevels[[variable]]){
implieds[i]<-P.X(X=0,outcome = outcome,variable = variable,value = i)*
proportions.raw[[variable]][[i]]
}
}
implied.proportion(X = 0,outcome = 1,variable = "gender")
implied.proportion<-function(X,outcome,variable){
implieds<-rep(0,length(fit$xlevels[[variable]]))
for (i in fit$xlevels[[variable]]){
implieds[i]<-P.X(X=0,outcome = outcome,variable = variable,value = i)*
proportions.raw[[variable]][[i]]
}
return(sum(implieds))
}
implied.proportion(X = 0,outcome = 1,variable = "gender")
implied.proportion(X = 0,outcome = 2,variable = "gender")
implied.proportion(X = 0,outcome = 3,variable = "gender")
implied.proportion(X = 0,outcome = 4,variable = "gender")
implied.proportion(X = 10,outcome = 4,variable = "gender")
implied.proportion(X = 10,outcome = 1,variable = "gender")
implied.proportion(X = 10,outcome = 2,variable = "gender")
implied.proportion(X = 10,outcome = 3,variable = "gender")
implied.proportion(X = 10,outcome = 4,variable = "gender")
implied.proportion<-function(X,outcome,variable){
implieds<-rep(0,length(fit$xlevels[[variable]]))
for (i in fit$xlevels[[variable]]){
implieds[i]<-P.X(X=X,outcome = outcome,variable = variable,value = i)*
proportions.raw[[variable]][[i]]
}
return(sum(implieds))
}
implied.proportion(X = 0,outcome = 1,variable = "gender")
implied.proportion(X = 10,outcome = 1,variable = "gender")
implied.proportion(X = 10,outcome = 2,variable = "gender")
implied.proportion(X = 10,outcome = 3,variable = "gender")
implied.proportion(X = 10,outcome = 4,variable = "gender")
proportions.raw
proportions.raw[[1]]
str(fit)
fit$lev
proportions.raw
proportions.raw[[1]]
names(proportions.raw[[1]])
4^2
squared.error<-function(X,variable){
outcome.errors<-rep(0,length(fit$lev))
for (i in 1:length(fit$lev)){
outcome.errors[i]<-(implied.proportion(X=X,outcome = i,variable = variable)-proportions.raw[[1]][[i]])^2
}
return(sum(outcome.errors))
}
squared.error(X=0,variable = "gender")
squared.error(X=-1,variable = "gender")
squared.error(X=-1,variable = "gendr")
squared.error(X=-1,variable = "g")
squared.error(X=-1,variable = "ref")
squared.error(X=-1,variable = "age")
squared.error(X=-1,variable = "ethnicity")
optim(par = 0,fn = squared.error(x,"gender"))
optimise(f = function(x){squared.error(x,"gender")},interval = c(-100,100))
recommend<-function(variable){
optimised<-optimise(f = function(x){squared.error(x,variable)},interval = c(-100,100))
}
recommend("gender")
abc<-recommend("gender")
abc
fit$xvalues[["gender"]]
fit$xlevel[["gender"]]
P.X(X = abc$minimum,outcome = 1,variable = "gender",value = fit$xlevel[["gender"]][[1]])
P.X(X = abc$minimum,outcome = 1,variable = "gender",value = fit$xlevel[["gender"]][[2]])
P.X(X = abc$minimum,outcome = 4,variable = "gender",value = fit$xlevel[["gender"]][[1]])
P.X(X = abc$minimum,outcome = 4,variable = "gender",value = fit$xlevel[["gender"]][[2]])
message("ABD"," ksjd")
recommend<-function(variable){
optimised<-optimise(f = function(x){squared.error(x,variable)},interval = c(-100,100))
message("The recommended value of X is ",optimised$minimum)
}
recommend("gender")
recommend("age")
recommend("ethnicity")
recommend("ethnicity")
recommend("disability")
recommend("anyoldrion")
recommend("ret")
recommend<-function(variable){
if (!(variable %in% variables)) {
stop("variable not in model")
}
optimised<-optimise(f = function(x){squared.error(x,variable)},interval = c(-100,100))
message("The recommended value of X is ",optimised$minimum)
}
recommend("ret")
recommend("gender")
recommend("ethnicity")
recommend("ethnicit")
