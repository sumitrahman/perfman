{
    "contents" : "#'Coefficient lookup.\n#'\n#'This utility function is used by other functions to lookup coefficients that\n#'have been estimated by \\code{fit.model}.  The estimates are found in the \n#'\\code{polr} class object \\code{fit}.  Baseline categories return a value of\n#'zero.\n#'\n#'The function checks that the variable is in the fitted model, and that the\n#'value for that variable is one that has been included in the model.\n#'\n#'@param variable A column name from the original data frame.  This will be the\n#'  variable one of whose values you are looking up the coefficient for.\n#'\n#'@param value A specific value of the variable under consideration.  This value\n#'  must be one of the values actually used in the data frame for \n#'  \\code{fit.model}.\n#'\n#'@return A numeric value, zero for a baseline category or the estimated\n#'  coefficient from the fitted logistic model.  These estimates are logarithms\n#'  of the cumulative logit (once you add the relevent cut).\n#'\n#'@examples\n#'\\dontrun{\n#'coef.lookup(\"gender\",\"female\")\n#'}\ncoef.lookup<-function(variable,value){\n    if (!(variable %in% variables)) {\n        stop(\"variable not in model\")\n    } else if (!(value %in% fit$xlevels[[variable]])) {\n        stop(\"value not observed for this variable\")\n    } else if (fit$xlevels[[variable]][[1]]==value) {\n        return (0)\n    } else\n        return (fit$coefficients[[paste0(variable,value)]])\n}\n\n\n#'Probability function for perfman.\n#'\n#'This utility function calcuates the probability of a specific outcome for a\n#'full set of values for the explanatory variables in the fitted model.\n#'\n#'This function is best thought of as a real-valued function of a single\n#'variable X, with the function being specified by variable, value and outcome.\n#'For a particular value of an explanatory variable, each value of X will\n#'return a probability, and the same value of X will, for a different value of\n#'the same variable, return a probability that is consistent with the set of\n#'estimated coefficients from the logistic model that has been fitted.\n#'(The value of the outcome variable is also taken account of too.)\n#'\n#'@param X A real number.  This is the number that is picking out one member of\n#'  the family of probability functions that are consistent with the fitted\n#'  logisitic model.\n#'\n#'@param outcome An integer specifying a particular outcome.  This is one of the\n#'  values of the outcome variable (i.e. the dependent variable from the model)\n#'\n#'@param variable A column name from the original data frame.  This will be the\n#'  variable one of whose values you are calculating the probability for.\n#'\n#'@param value A specific value of the variable under consideration.  This value\n#'  must be one of the values actually used in the data frame for \n#'  \\code{fit.model}.  This is the specific category you are calculating the\n#'  probability for (for your chosen outcome).\n#'\n#'@return The calculated probability corresponding to the values you have\n#'  specified.\n#'@examples\n#'\\dontrun{\n#'P.X(-1.9,2,\"gender\",\"female\")\n#'}\nP.X<-function(X,outcome,variable,value){\n    (1+exp(X+coef.lookup(variable,value)-cuts[outcome+1]))^-1-\n    (1+exp(X+coef.lookup(variable,value)-cuts[outcome]  ))^-1\n}\n\n#'Function for calculating implied proportions.\n#'\n#'This utility function calcuates the implied proportions in the population for\n#'the specified outcome, making use of the probabilities for the various\n#'categories of the chosen variable and the chosen value of X. \n#'\n#'The real-valued X indexes a family of probability distributions for a given\n#'explanatory variable.  Since we know the distribution of the values of the\n#'chosen variable (from the original dataset, it is calculated in\n#'\\code{fit.model} and stored in \\code{proportions.raw}), this information is\n#'combined with the probability distributions for the different values of the \n#'variable to arrive at the implied probability for the chosen outcome.\n#'\n#'For example, if we have a gender variable (taking values male and female), and\n#'in our dataset there are equal numbers of males and females, then the implied\n#'proportion for outcome 1 will be the mean of the male probability of outcome 1\n#'and the female probability of outcome 1.  If there were twice as many females\n#'as males, then the implied probability would be weighted towards the female\n#'probability twice as heavily as towards the male.\n#'\n#'@param X A real number.  This is the number that is picking out one member of\n#'  the family of probability functions that are consistent with the fitted\n#'  logisitic model.\n#'\n#'@param outcome An integer specifying a particular outcome.  This is one of the\n#'  values of the outcome variable (i.e. the dependent variable from the model)\n#'\n#'@param variable A column name from the original data frame.  This will be the\n#'  variable one of whose values you are calculating the probability for.\n#'\n#'@return The calculated probability corresponding to the values you have\n#'  specified.\n#'\n#'@examples\n#'\\dontrun{\n#'implied.proportion(-1.9,2,\"gender\")\n#'}\nimplied.proportion<-function(X,outcome,variable){\n    implieds<-rep(0,length(fit$xlevels[[variable]]))\n    for (i in fit$xlevels[[variable]]){\n        implieds[i]<-P.X(X=X,outcome = outcome,variable = variable,value = i)*\n            proportions.raw[[variable]][[i]]\n    }\n    return(sum(implieds))\n}\n\n#'Function for calculating the 'distance' between two distributions.\n#'\n#'This utility function calcuates the distance between the implied distribution\n#'of outcomes for a specific value of X and a specific variable, and the\n#'observed distribution of outcomes from the original data.  The distance\n#'function being used is the sum of squared differences.\n#'\n#'The real-valued X indexes a family of probability distributions for a given\n#'explanatory variable.  By specifying a variable, the function \n#'\\code{implied.proportion} can produce implied probabilities, and these are\n#'compared with the observed distribution for each outcome.\n#'\n#'The purpose of this function is to have a function of X that we can seek to \n#'minimise.  This is precisely what the \\code{recommend} function does.\n#'\n#'@param X A real number.  This is the number that is picking out one member of\n#'  the family of probability functions that are consistent with the fitted\n#'  logisitic model.\n#'\n#'@param variable A column name from the original data frame.  This will be the\n#'  variable one of whose values you are calculating the probability for.\n#'\n#'@return The sum of the squared differences between the observed distribution\n#'of outcomes and the distribution of outcomes implied by your choice of X and\n#'variable of interest.\n#'\n#'@examples\n#'\\dontrun{\n#'squared.error(-1.9,\"gender\")\n#'}\nsquared.error<-function(X,variable){\n    outcome.errors<-rep(0,length(fit$lev))\n    for (i in 1:length(fit$lev)){\n        outcome.errors[i]<-\n            (implied.proportion(X=X,outcome = i,variable = variable)-\n                 proportions.raw[[1]][[i]])^2\n    }\n    return(sum(outcome.errors))\n}\n\n#'Function for recommending the modelled probabilities to use.\n#'\n#'This function recommends the choice of modelled probabilities for the chosen\n#'variable.\n#'\n#'This function selects the member of the family of probability distributions\n#'that are consistent with the model fitted by \\code{fit.model} which is closest\n#'to the overall observed distribution in the original dataset.  The resulting\n#'probabilities are what we call \\emph{corrected probabilities} and can be\n#'thought of as the probability distributions for each value of the chosen\n#'variable having corrected for the confounding effects of the other variables\n#'in the model.\n#'\n#'There is text output displaying the recommended value of X - this is the\n#'value that is used to generate the specific probabilities from the family of\n#'probability distributions that are consistent with the logisitc effects for \n#'the variable of interest in the fitted model.  Then a data frame is created \n#'(and displayed) that gives the probability distribution for each value of the\n#'variable of interest, and the implied distribution of outcomes (which is the\n#'mean of the various probability distributions, weighted by the relative\n#'frequencies of each particular value of the variable in the original dataset).\n#'\n#'@param variable A column name from the original data frame.  This will be the\n#'  variable one of whose values you are calculating the probability for.\n#'\n#'@return A data frame called \\code{optimised.probs} that gives the recommended\n#'probabilities for each outcome and each value of the chosen variable, as well\n#'as the implied distribution for outcomes given these recommended \n#'probabilities.\n#'\n#'@examples\n#'\\dontrun{\n#'recommend(\"gender\")\n#'}\nrecommend<-function(variable, lower.bound=-100, upper.bound=100){\n    if (!(variable %in% variables)) {\n        stop(\"variable not in model\")\n    }\n    optimised<-optimise(f = function(x){squared.error(x,variable)},\n                        interval = c(min(lower.bound, upper.bound),max(lower.bound, upper.bound)))\n    message(\"The recommended value of X is \",optimised$minimum)\n\n#create data frame with outcomes along the top and variable values down the side\n    optimised.probs<-data.frame(sapply(fit$xlevels[[variable]],\n                                FUN=function(q){\n                                    P.X(X=optimised$minimum,\n                                        outcome = 1:length(fit$lev),\n                                        variable = variable,\n                                        value = q)}))\n    optimised.probs<-cbind(1:length(fit$lev),\n                           sapply(1:length(fit$lev), FUN=function(q){\n                               implied.proportion(X=optimised$minimum,\n                                                  outcome = q,\n                                                  variable = variable)}),\n                           optimised.probs)\n    names(optimised.probs)[1]<-names(fit$model[1])\n    names(optimised.probs)[2]<-\"implied probability\"\n\n    optimised.probs\n}\n",
    "created" : 1451521043385.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3710548679",
    "id" : "5777C1A4",
    "lastKnownWriteTime" : 1466353044,
    "path" : "~/GitHub/perfman/R/utility_functions.R",
    "project_path" : "R/utility_functions.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}